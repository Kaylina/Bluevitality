global
	log 127.0.0.1 local0
	maxconn 4096
	chroot /usr/local/haproxy			
	uid 99								
	gid 99								
	daemon		
	nbproc 1          建议默认值（在单核心运行）
	pidfile /usr/local/haproxy/run/haproxy.pid
	ulimit-n 65535    ulimit数量限制 

defaults						
	log global            定义全局的syslog服务器，每个实例最多定义两个（若使用下面的参数则可省略）
	log 127.0.0.1 local3  日志文件的输出定向
	mode http             处理类型（当使用tcp模式时将在c/s间建立全双工且不对报文检查，常用于ssl，ssh，smtp等）
	option dontlognull    不记录健康检查的日志信息	
	option abortonclose   当负载很高时自动结束当前队列处理较久的连接
	option redispatch     当serverid对应的服务器挂掉后，强制定向到其他健康服务器
	retries 2             2次连接失败就认为后端不可用（主要通过后面的check检查）
	contimeout 5000       连接超时
			
	stats enable            启用状态监控
	stats refresh 2 	      统计页刷新间隔
	stats uri /haproxy-stats    监控页访问地址：http://localhost:1080/haproxy-stats
	stats realm status\ HAproxy 监控页提示信息
	stats auth admin:admin      监控页用户和密码（可多行）
	stats hide-version          隐藏统计页版本
	stats admin if TRUE         启/禁用后端服务器（haproxy-1.4.9以后版本）	
	
	clitimeout 50000            c端连接超时
	srvtimeout 50000            s端连接超时
	timeout check 2000          心跳检测超时

    errorfile 403 /etc/haproxy/errorfiles/403.http 	WEB信息提示（可定制页面）
    errorfile 500 /etc/haproxy/errorfiles/500.http 
    errorfile 502 /etc/haproxy/errorfiles/502.http 
    errorfile 503 /etc/haproxy/errorfiles/503.http 
    errorfile 504 /etc/haproxy/errorfiles/504.http
	
frontend HHHHH
	bind 192.168.1.1:80         监听地址和端口（对外提供服务）
	mode http                   处理类型
	log global                  应用全局日志配置（vim /etc/logrotate.conf）
	option httplog              启用http的log 
	option httpclose            每次请求完毕后主动关闭http通道（不支持keep-alive，只能模拟这种模式的实现）
	option forwardfor           后端需获得客户ip（从Http Header获得）
	
	日志记录设置
    capture request  header Host len 40       捕获请求首部（格式：capture {request|response header 首部名称 首部长度）
    capture request  header Content-Length len 10       捕获请求首部
    capture request  header Referer len 200             捕获请求首部
    capture response header Server len 40               捕获响应首部
    capture response header Content-Length len 10       捕获响应首部
    capture response header Cache-Control len 8         捕获响应首部
	
	--------acl策略配置--------
	acl BBX hdr_reg(host) -i ^(www.itnihao.cn|ww1.itnihao.cn)$  若请求的域名满足正则表达式中的2个则返回true -i：忽略大小写 
	acl itnihao_blog hdr_dom(host) -i blog.itnihao.cn 若请求的域名满足www.itnihao.cn返回true
	acl itnihao hdr(host) -i itnihao.cn       若请求的域名满足itnihao.cn返回true
	acl file_req url_sub -i killall=          在请求url中包含killall=，则此控制策略返回true
	acl dir_req url_dir -i allow              在请求url中存在allow作为部分地址路径，则此控制策略返回true
	acl missing_cl hdr_cnt(Content-length) eq 0           当请求的header中Content-length等于0时返回true 
	--------acl策略匹配--------
	block if missing_cl                       当请求中header中Content-length等于0阻止请求返回403 
	block if !file_req || dir_req             block表示阻止请求，返回403错误，当前如果不满足策略file_req，或者满足策略dir_req，则阻止请求 
	use_backend BBBB if BBX                   当满足BBX的策略时使用BBBB backend 
	use_backend CCCC if BBX                   当满足BBX的策略时使用CCCC backend 
	default_backend AAAAA                     均不满足时使用默认AAAAA的backend【重要】
	
backend AAAAA
	mode http                     处理类型
	balance roundrobin            负载算法（source，roundrobin，leastconn，static-rr）不设置则使用默认段配置
	log 127.0.0.1 local3 err      vim /etc/logrotate.conf
	option httpchk GET /index.htm 健康检测（指定心跳检测文件）
	server node1 192.168.16.2:80 cookie web1 check inter 1500 rise 3 fall 3 weight 1  maxconn 2000
	server node2 192.168.16.3:80 cookie web2 check inter 1500 rise 3 fall 3 weight 2  maxccon 2500
