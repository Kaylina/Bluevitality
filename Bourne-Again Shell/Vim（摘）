查看帮助 `:help command` 查看关于command命令的帮助，也可以直接`:help`,使用`:q`推出帮助；
在终端中使用：在终端中可以使用`set -o vi`命令来在终端中使用vim模式，可以像在vim中一样操作
切换模式:
        normal          普通模式,其他模式中按下<Esc>键返回到普通模式
        insert          插入模式，普通模式中按下i、a、I、A、o等插入键进入插入模式
        visual          可视模式，普通模式下按下v进入visual模式，用于选择文本
        visual block    块选择模式，普通模式下按下<Ctrl-v>进入，用于操作文字块
        select          选择模式，使用鼠标拖动选择文字或普通模式下按gh后进入，与windows下的文字选择一样，选择后即可输入要替换的文字
        Command-Line    命令行模式，按下`:`进入，用于输入vim命令
        Ex Mode         多行命令行模式，普通模式下按下Q进入
        Operator Mode   操作符等待模式，即在普通模式下输入一个按键时，vim会等待用户输入，此时就处于操作符等待模式
        注：普通模式下按q:进入可编辑命令行窗口，修改完命令后直接Enter执行即可
            在命令行模式下
                <C-R>+      粘贴系统剪贴板内容到命令行
                <C-R><C-A>  复制光标处的字符串到命令行
                <C-R><C-W>  复制光标处单词到命令行

插入：
	  o        在光标下方新开一行并将光标置于新行行首，进入插入模式。
      O        同上，在光标上方。      
      i	       插入，与insert效果一样。
      I        在本行第一个非空字符处插入    
      a        在光标之后进入插入模式,即append。
      A        在本行最后一个非空字符后进入插入模式
	  R        进入替换模式，直到按下Esc
	  r        替换一个字符后返回到normal模式
	  set xxx  设置XXX选项。

光标移动：h(上) j(下) k(左) l(右)；
	  0 	   行首
	  $        行尾
	  ^        行首(非空)
	  g_       行尾(非空)
      o        可视模式下移动到选择的另一端
      '<       可视模式下代表选择的起始端
      '>       可视模式下代表选择的终止端

查找替换：
	  fx       到下一个为x的字符处
	  tx       到下一个x字符前
	  Fx        与`fx`反向  
	  T,       与`t,`反向
	  3fa      在当前行查找第三个出现的a
	  /pattern 正则匹配pattern字符串，多个结果可以按`n`到下一个
      i)       匹配括号内部
      a)       匹配括号中的内容(包括括号)
	  ?pattern 正则匹配搜索，与`/pattern`方向相反
	  :s/p1/p2/g       将当前行中所有p1均用p2替代，若要每个替换都向用户询问则应该用gc选项
	  :n1,n2s/p1/p2/g  将第n1至n2行中所有p1均用p2替代
	  :g/p1/s//p2/g    将文件中所有p1均用p2替换 
      :v/text/command 在所有不包含text的行运行command
   注：.*[]^%~$ 在Vi中具有特殊含义，若需要查找则应该加上转义字符"\"
        可以在查找替换中使用%(所有行)、.(当前行)、$(最后一行)、+n等特殊符号
        搜索或替换命令后不加/g代表只执行一次搜索或替换

大小写转换：
	  rx	    将当前光标前的字符更改为x
	  ~         更改当前光标处字符的大小写
	  gU  	    变成大写，同时拷贝到缓冲区
	  gu	    变成小写，同时拷贝到缓冲区
      guu/gUU/g~~  行小写/行大写/行翻转
      guw/gUw/g~w  字小写/字大写/字翻转(狭义字<cword>)
      vEU/vEu/vE~       字大写/字小写/字翻转(广义字)
      ggguG/gggUG  当前文件所有内容都小写/大写
      ggVGg?    将整个文件的内容用rot13编码(只对英文字母有效，可逆)
                注：rot13编码就是将26个字母的[a-m]和[n-z]对应调换
      gf        取光标处的广义字为文件名，试图打开它
      ga        显示光标处字符的ascii、hex、oct码
      <C-A>/<C-X>  增大/减小光标处数字的大小
      :h 42     好玩的东西
      
跳转与历史记录：
     '.                   跳转到最后修改的那一行(精确到行)
     `.                   同上，精确到列
     `[和`<               最近选择部分的开始
     `]和`>               最近选择部分的结尾
     :ju                  查看跳转记录
     <C-O>                按跳转记录往回跳
     <C-I>                按跳转记录往前跳
     :history             命令行历史记录
     :his c               同上
     :his s               搜索历史记录
     q/                   搜索命名历史记录窗口
     q:                   命令行历史窗口,可编辑，按下<Enter>执行
     :<C-F>               同上
     i<C-R>:              把最后一个命令粘贴当当前位置
     i<C-R>/              把最后一个搜索内容粘贴到当前位置

更快的光标移动：
	  NG/:N/Ngg	移动到第N行
	  n+    光标下移n行
	  n-    光标上移n行 
	  gg	到第一行
	  G	    到最后一行
	  w	    下一个单词的开头
      W     下一个字符串的开头
      b     上一个单词的结尾
      B     上一个字符串的结尾
	  e	    下一个单词的结尾
      E     下一个字符串的结尾
	  C-y   向上滚动一行
	  C-e   向下滚动一行
      C-f   向前滚动一页
      C-b   向后滚动一页
      C-u   向前滚动半页
      C-d   向后滚动半页
      [[    前一个函数的开始
      ]]    后一个函数的开始
      []    前一个函数的结尾
      ][    后一个函数的结尾
      '.    最后修改的行
      `.    最后修改点
      '"    上一次离开该文件时光标所在的行
	  %	    匹配括号移动，包括`(,{,[`,需要先把光标移动到括号上
      (或)  匹配段落
      {或}  匹配段落
	  *和#	匹配光标所在单词，移动到上一个/下一个匹配单词，对英文较有效
     注:如果单词是由空格分隔，则需要使用E和W
	数字+定位键可以快速定位，如3l为向右移动3个字符(汉字),3k为向上移动3行

更更快的光标移动：
   <start position><command><end posi安装中文文档：到http://sourceforge.net/projects/vimcdoc/files/下载最新的vim中文文档,下载后
    进入解压文件夹，执行sudo ./vimcdoc.sh -i即可完成安装，默认安装后使用中文文档，原英文帮助并不会被覆盖，
    要切换语言，可以通过命令`:set helplang=en/cn`来设置,卸载中文文档直接进入路径执行sudo ./vimcdoc.sh -ution>
   例如：`0y$`意味着：
   	       0        先到行首
   	       y        从这里开始拷贝
   	       $        拷贝到本行最后一个字符
           ye       从当前位置拷贝到本单词末尾
           y2/gn   拷贝两个`foo`之间的内容

翻页与行滚动：
        Ctrl+E           将屏幕上滚一行 
        Ctrl+Y           将屏幕下滚一行 
        Ctrl+U           将屏幕上滚半页 
        Ctrl+D           将屏幕下滚半页 
        Ctrl+B           将屏幕上滚一页 
        Ctrl+F           将屏幕下滚一页 
        Ctrl+L           重绘屏幕 
        z<Enter>        将当前行置为屏幕的顶行 
        nz<Enter>       将当前行下的第 n 行置为屏幕的顶行 
        z.               将当前行置为屏幕的中央 
        nz.              将当前行上的第 n 行置为屏幕的中央 
        z-               将当前行置为屏幕的底行 
        nz-              将当前行上的第 n 行置为屏幕的底行   

行操作：
         :set autoindent        自动缩进
         :set list              显示换行符
         :set wrap              自动折行(不插入换行符)
         :set textwidth         设置行最大宽度，自动插入换行符，为0时关闭(缩写tw)
         :set wrapmargin        当textwidth=0时生效，从右窗口边界算起的字符数，为0时关闭
         :set formatoptions+=mM 设置文件格式，使vim支持中文自动换行(缩写fo)
         :set endofline         设置文件结束符
         :%s/\n//g              删除换行符
         :join                  合并多行
         J                      合并两行
         gJ                     合并行，行之间不保留空格
         gq                     格式化选择的部分(自动换行)
         :gq4j                  格式化5行
         gqip/gqap              格式化整个段落
         gq}                    从当前位置格式化到段落结束
         gq{                    从当前位置格式化到段落开头
         gqq/gqgq               格式化当前行
         注：set joinspaces=n指定合并行时保留的空格


内容删除：
	  x     删除光标处的字符
	  dd    删除当前行到缓冲区
      D     删除至行尾
	  dta   删除所有内容直到遇到字符a
	  c和cc 功能与d和dd相同，只不过删除后进入INSERT MODE
	  d}	删除到下一段开头
	  dnh/dnl   删除从光标处开始向左/右的n个字符，n为数字
	  dnj/dnk   删除从光标处开始到向上/向下n行的内容，n为数字
      cw/ce/cc 改变单词、改变到下一个空格、改变当前行(即删除后插入)
      C        改变当前光标到行尾
      s     替换当前字符，并进入编辑模式
      S     改变整行，并进入编辑模式
      xp    调换单个字符的顺序
   注：c/C与d/D的区别在于删除后会进入插入模式

复制与粘贴：
    :reg        查看所有剪贴板内容
    y           开始拷贝
    yy          拷贝当前行
    p           在光标后粘贴
    P           在光标前粘贴
    d           删除到缓冲区
    D           删除到行尾
    v           选择文本
    V           选择整行,配合方向键可以多行选择
    xy          复制内容到寄存器x中，可以结合其他操作选定要复制的区域
    xp          粘贴寄存器x中的内容到光标后，整行则粘贴到当前行下面
    "+y         复制内容到寄存器 " 中，引号可以是其他字符
    "+p         拷贝寄存器 " 中的内容，引号可以是其他字符
    "[a-z]nyy   复制n行到寄存器[a-z]
    注：在操作前加上数字表示重复一个操作多次，如3yy为复制三行
        命令行模式下使用<C-r>+来粘贴系统剪贴板的内容

撤销与还原：
	  u	撤销
	  <C-r> 还原

文件操作：
	  :e path       在当前选项卡打开文件
      :e!           忽略所有更改，重新编辑当前文件
      :%!xxd        按十六进制查看当前文件
      :%!xxd -r     从十六进制查看返回正常模式
	  :w 	        保存文件
	  :saveas path  另存为
	  :x/ZZ/:wq     保存并退出
	  :q!	        不保存直接退出
	  :bn和:bp      切换到下/上一个buffer(不适用于使用选项卡时)
      :bN           切换到第N个buffer
      :bd! N        关闭第N个buffer,不指定参数将关闭当前的buffer
      <C-g>         统计文件行数和当前行
      g<C-g>        统计文件字数和当前行、列信息

重复操作：
	  .	        (小数点)重复上一次的命令
	  N<command>	重复某个命令N次
    注：结合使用`N.`表示重复上一次命令N次

与shell的切换：
     :!command    不退出vim而执行一条shell命令，执行完返回
     :!!          执行前一条shell命令
     :shell    	  切换到shell中，使用exit或ctrl+d返回vim
     :r!command   不退出vim执行一条命令并把结果插入到当前位置后
     !!date       读取日期并替换到当前行(!!与:.!等价)
     :w!command   执行命令并将结果写入到当前文件(覆盖当前内容)
     :w >> <file> 添加到文件末尾，也可以指定行号
     :so <file>   读取文件并执行里面的命名
     <C-X><C-f>   插入当前目录下的一个文件名到当前位置
     :!sort       对文本行进行排序


块操作：
     ^	    	 到行头
     $	    	 到行尾
     <C-v>       开始块操作
     <C-d>	 移动到光标所在处的最底部，即一个矩形块
     I--[ESC]    I是插入，插入后按[ESC]键来为每一行生效
     A--[ESC]    A是在末尾插入，插入后按[ESC]键来为每一行生效
     J		 把选择的所有行合并变成一行
     <或>	 左右缩进(在normal模式下是<<和>>)
     =		 自动缩进
     o       移动到选择的另一端
   注：此时jkhl和G等移动键仍然可用

区域选择：
     <action>a<object>和<action>i<object>
   action可以是任意操作，如v(可视模式选择),d(删除),y(拷贝);
   object是作为匹配的单个字符,可以是：
	 w(一个单词),W(一个以空格分隔的单词),s(一个句子),p(一个段落)
	 或者一个特殊字符：" ' ) } ]
   a意为all,代表对全部操作(包括匹配字符)
   i意为inside,代表对内部操作(不包括匹配字符)
   对于字符串 (vim (x) [shell (""cmd"")),光标在第二个m的位置:
	vi"  → 会选择 cmd.
        va"  → 会选择 "cmd".
	vi)  → 会选择 "cmd".
	va)  → 会选择 ("cmd").
	v2i) → 会选择 vim (x) [shell ("cmd")
	v2a) → 会选择 (vim (x) [shell ("cmd"))

自动提示：
	<C-p>  匹配上一个关键字
	<C-n>  匹配下一个关键字

宏录制：
	qa   将操作记录到寄存器a中
	q    停止录制
	@a   replay录制的宏a
	@@   播放最新的宏

寄存器：
	:reg  查看寄存器
	0     保存了最新的复制内容
	1-9   保存了最近9次的删除内容
	"     默认寄存器，保存了最近复制或删除的内容
	-     行内的删除内容
	.     最近插入的内容
	%     当前文件名
	#     当前交替文件名?
	:     最近输入的命令 
	=     只读，用于执行表达式命令
	/     最近的搜索模式
	"*    GUI选择与拖拽寄存器
	"+    GUI选择与拖拽寄存器 
	"~    GUI选择与拖拽寄存器
	"_    黑洞寄存器，不缓存操作内容,使用:reg命令看不到,但可以使用
   注：`:reg x` 查看单个寄存器x的内容，x为以上寄存器的一种，或者其他指定的寄存器

寄存器操作：
    注：正常模式下，访问指定寄存器时需要加上"(双引号)键再进行操作
	"ndd  删除行到"n寄存器,n可以是其他字母
	"myy  复制行到"m寄存器,m可以是其他字母
	"?p   粘贴"?寄存器的内容，"?(问号)可以是其他存在的寄存器字符
	命令模式下：
	:nd	删除第n行,为+/-n则删除当前行之前/后第n行
	:dn	从当前行开始删除n行,+/-n意义也一样
	:y m    复制行到"m寄存器
	:p n    粘贴"n寄存器的内容,与"np一样
	:pu! n  粘贴"n寄存器的内容到本行之前,与"mP一样
    注：字母寄存器大小写表示同一个寄存器，但是使用大写寄存器名复制或删除时，原来的内容
	不会被覆盖，而是在其后追加新内容
    例: :5,+10y m  复制第5行到当前光标下第10行内容到"m寄存器
        "MGy       追加当前行到最后一行的内容到寄存器"m中

寄存器信息保存：
	:wviminfo x  将寄存器内容保存到x文件中
	:rviminfo! x 读取x文件中的内容到寄存器
	vim -i x     打开vim时就从x文件载入寄存器信息

标签管理：
	vim -p <文件>   以多标签形式打开文件，vim -p * 为打开当前目录下所有文件
	:tabnew		增加一个空标签,可以传参指定要打开的文件
	:tabc		关闭当前标签(close)后面加上数字可以指定关闭第几个标签页
	:tabo		关闭其他标签(other)
	:tabs		查看所有打开的标签(show),当前标签为">",修改过的缓冲区为"+"
	gt		切换到下一个标签,与:tabn效果一样,前面加数字n可以指定切换到第n个标签
	gT		切换到上一个标签,与:tabP效果一样
	:tabfirst	切换到第一个标签，与:tabr效果一样
	:tablast	切换到最后一个标签
	:tabe <文件>	在新标签中编辑文件,与tabnew <文件>效果一样
	:tab split	在新标签页打开当前缓冲区的内容
	:tabf *.txt	在当前目录搜索并在新标签打开第一个搜索到的文件(只能打开一个)
	:tabm 5		将当前标签页移动到第5个位置之后(move),默认移到最后，5可以是其他数字
	:tabd <命令>	同时对多个标签页执行命令(do)
     注:在操作前加上数字n表示新标签的位置在第n个之后，如:
	    :0tab help gt 在第一个标签之后增加一个新标签并显示关于gt的帮助内容
	    2gt		切换到第2个标签页，0gt和1gt始终为切换到第一个
	在command模式下输入命令:tab? <command>可以加上"|"以一次使用多个命令，如:
	    :tabd 3d | 

窗口管理：
	:new  <文件名>	在水平新窗口中打开文件，如果文件不存在则参数作为窗口名
	:vnew <文件名>  在垂直新窗口中打开文件，同上
    :Nnew <文件名>  在第N个位置打开新窗口，同理可用Nvnew
	:f   <文件名>	重命名窗口(当前文件)
	:sp  <窗口名>	纵向切割窗口，与:split效果一样
	:vsp <窗口名>	横向切割窗口，与:vsplit效果一样
	vim -o <多个文件>	水平多窗口打开多个文件
	vim -O <多个文件>	垂直多窗口打开多个文件
	vim -d <多个文件>	垂直打开多个窗口并比较,与vimdiff <多个文件>效果一样
	:q或:close	关闭当前窗口，:close只是暂时关闭，内容还在缓存中
	:only		关闭其他窗口，只保留当前窗口
   注：在窗口操作中，a代表全部(all),w代表保存(write),q代表退出(quit),可以多个结合使用

窗口切换：
	:<C-w>+j/k	通过hjkl或方向键上下切换，或者双击<C-w>切换到下一个窗口
	:n <文件名>	调至指定的文件窗口
	:e#		回到刚才编辑的文件
   注：按下<C-w>后，窗口切换操作和normal模式下光标移动操作一样

窗口大小调整：
	:<C-w> +	增加行
	:<C-w> -	减少行
	:res 5		显示行数为5行，5可以是其他数字
	:res +5/-5	行数增加/减少5行
	:vertical res 5		显示列数为5列，5可以是其他数字
	:vertical res +5/-5	列数增加/减少5列
   注：res即resize,增加多行时使用`:resize 行数`即可，可以使用+或-号，调整列时前面加上vertical即可
       行数和列数可以用百分比表示

信息和文件浏览：
	:Ex	开启目录浏览器，可以浏览当前目录下所有文件，并可以选择
	:Sex	水平分割当前窗口，并在一个窗口中开启文件浏览器,按下<Enter>可以打开
	:ls	查看当前buffer状况
	:set runtimepath?    查看vim插件路径
	:echo $VIM
	:echo $VIMRUNTIMR    查看VIM运行路径
	:split 	查看当前缓冲区
    <C-o-o> 连按两次ctrl+o快速打开上次打开的文件
   注：同样地，使用:q来退出

编程中常用的一些跳转命令：
    %	跳转到配对的括号去
    [[	跳转到代码块的开头去(但要求代码块中'{'必须单独占一行)
    gD	跳转到局部变量的定义处
    ''	跳转到光标上次停靠的地方, 是两个', 而不是一个"
    mx	设置书签,x只能是a-z的26个字母
    `x	跳转到书签x处("`"是1左边的键)，精确到字符
    'x  跳转到书签x处("'"为单引号)，精确到行
    ``  跳转到上一次跳转到的位置
    `0  跳转到上一次退出时的位置
    >>	增加缩进,"x>>"表示增加以下x行的缩进
    <<	减少缩进,"x<<"表示减少以下x行的缩进
    :marks  查看定义的标志(书签)
    :jumps  列出曾经跳转过的位置的列表，最后一个以`>`标记
    <C-o>   跳转到上一个跳转的位置
    <C-i>   跳转到下一个跳转的位置
    注：这两个组合键相当于历史记录的前进后退
	
保存与恢复session:
    :mksession <file> 
    :source <file>

按键映射：
    [模式]+map 代表在某种模式下生效
    [模式]+noremap 代表不递归的映射
    inoremap <Esc> <Nop> 将<Esc>键映射为空操作，即取消<Esc>键的功能

各种映射类型的有效模式：
    ----------------------------------------------------------------------------
    |                   命令                   | 普通 | 可视+选择 | 操作符等待 |
    ----------------------------------------------------------------------------
    | :map  | :noremap  | :unmap  | :mapclear  |  是  |    是     |     是     |
    | :nmap | :nnoremap | :nunmap | :nmapclear |  是  |    -      |     -      |
    | :vmap | :vnoremap | :vunmap | :vmapclear |  -   |    是     |     -      |
    | :omap | :onoremap | :ounmap | :omapclear |  -   |    -      |     是     |
    ----------------------------------------------------------------------------

其中，类似可视模式又有三种：
----------------------------------------------------------
|                   命令                   | 可视 | 选择 |
----------------------------------------------------------
| :vmap | :vnoremap | :vunmap | :vmapclear | 是   | 是   |
| :xmap | :xnoremap | :xunmap | :xmapclear | 是   | -    |
| :smap | :snoremap | :sunmap | :smapclear | 是-  | 是   |
----------------------------------------------------------

自动纠错/替换：
    [模式]+abbrev 缩写 目标文本  
        在插入/替换/命令行模式下输入缩写文本后vim会将其替换为目标文本，
        与按键映射不同的是vim会自动检测缩写文本的位置来决定是否进行替换。
    [模式]+[nore]+map 缩写 目标文本
        与abbrev的不同在于按键映射的文本替换仅仅是简单搜索后执行文本替换，
        而不会像abbrev一样智能检测文本的位置。
    注意：输入非字母、数字、下划线的字符就会引发abbreviations替换。
    

插件安装及配置：
	1.通过vim --version查看vim的相关路径信息，默认一般~/.vim/为用户配置目录，在其中新建文件夹
	syntax,doc,plugin等来放置自定义的配置，在~/.vimrc文件中配置相关参数。gvim的配置与vim差不多,
	但gvi会自动读取vim的配置，而vim不会使用gvim的配置

	2.安装ctags(跳转到函数、结构、宏等的定义处):
	   下载ctags源码包，进入目录依次执行`./configure`,`make`,`make install`
	   进入源码目录(多层目录则进入最上层),执行`ctags -R`，生成tags文件
	   进入vim,执行`:set tags=刚才生成的tags的绝对路径`(或者将其添加到~/.vimrc中，如果经常在该
	   目录工作的话),此时在vim中就可以使用ctags了：
	   <C-]>	跳转到当前光标处使用的函数的定义处
	   <C-t>	查看定义后返回刚才光标所在处
    3.安装中文文档：到http://sourceforge.net/projects/vimcdoc/files/下载最新的vim中文文档,下载后
    进入解压文件夹，执行sudo ./vimcdoc.sh -i即可完成安装，默认安装后使用中文文档，原英文帮助并不会被覆盖，
    要切换语言，可以通过命令`:set helplang=en/cn`来设置,卸载中文文档直接进入路径执行sudo ./vimcdoc.sh -u

    4.配置时,加上!为bool取反,如set number为显示行号,set number !为关闭行号

    5.Ctags的使用:先到代码目录使用`ctags -R`生成ctags文件,再打开代码文件使用`:set tags=path/to/tags`将tags
    文件加入到vim中,之后将光标放在函数名上按下<C-]>即可跳转到函数定义处,之后按下<C-t>返回原来的位置

    6.Cscope的使用:先安装cscope软件包,之后在项目根目录下使用`cscope -Rbq`,生成3个cscope数据库文件,之后打开
    源码,使用`cs add path/to/cscope.out path/to/project`将cscope.out文件加入到vim中去,cscope无法在子目录的
    源码中工作,仅对加入的路径目录有效.使用`:cs find g func_name`跳转到函数定义处,使用`:cs find c func_name`
    查找函数在哪里被调用过,结果显示在quickfix列表中,使用`:cw`命令重新打开quickfix结果窗口

    7.vim-surround用法:
        普通模式：
        -----------
        ds  删除包围字符(html)
        cs  修改包围字符
        ys  添加包围字符
        yS  添加包围字符，把包围后的文本放到下一行并自动缩进
        yss 为整行添加包围字符(html)
        ySs 包围整行并将处理后的文本放到下一行(自动缩进)
        ySS 和ySs一样

        可视模式：
        -----------
        s   添加包围字符
        S   添加包围字符并将其放到下一行(自动缩进)

        插入模式
        -----------
        <CTRL-s> 添加包围字符(html)
        <CTRL-s><CTRL-s> 添加包围字符并将其放到下一行(自动缩进)

        csab    将包围光标最近的字符对a换成字符对b(a、b可以是html标签对)
        cst"    将包围光标最近的html标签换成引号,引号可以是其他字符
        dsa     去除包围光标最近的字符对a(可以是html标签对)
        dst     去除光标最近的html标签对
        ysiw]   将词组用[]包围起来,]可以是其他字符(如html标签对)
        ysW)    将最近的字符串用()包围起来
        yssx    将光标所在行的字符串最外层用字符对x包围(x可以是html标签对)
        S(visual模式)
                可输入html标签来包围选定的字符串片段
        注：w代表word,W代表WORD(被空格分开的连续字符串)，p代表段落

    8.nerdcommenter用法:
        <leader>cc  注释当前行,多行注释时不会对齐，从光标处开始
        <leader>cm  使用多行注释符号注释
        <leader>cu  解除注释
        <leader>ci  切换注释状态
        <leader>c<space> 切换选中部分的注释状态
        <leader>cs  使用性感的注释方式
        <leader>cy  注释的同时将注释行复制到剪贴板
        <leader>c$  从光标处注释到行末
        <leader>cA  在行尾添加注释并进入插入模式
        <leader>ca  切换可用的注释符号(如//和/**/)
        <leader>cl  多行注释文字部分(忽略文字首尾空格)
        <leader>cb  多行注释并对齐注释符号(不忽略首尾空格)
        注:这三条注释命令可以在visual模式下使用,也可以结合数字前缀使用

    9.vim-markline用法：
        <leader>mc   Clear 
        <leader>ms   Select
        <leader>mt   Toggle
        <leader>me   Error 

    10.ctrlp用法：
        设置触发键，触发后弹出quicfix窗口：
            <C-d>   切换文件名匹配和全路径匹配
            <C-r>   切换正则匹配和普通匹配模式
            <C-b>   切换显示文件、当前打开的文件和最近打开文件列表
            <C-y>   如果文件不存在，输入路径+文件名后按下可以递归创建
                    文件夹并创建文件之后垂直分屏打开
            <C-o>   以垂直分屏方式打开文件
            <C-z>   标记文件以便同时打开多个文件

    11.Tabular用法
        在要格式化的行中输入:Tab /字符
        Tabular支持正则表达式!!!各种!!!随你用!!!在正则末尾加上\zs有奇效!!!
            :Tab /a                 以a字符为基准进行格式化，使左右行对齐，基准字符a将被放到中间
            :Tab /a\zs              同上，但a字符会被放到左侧的末尾
            :Tab /\v%([a-z])@<!|    匹配前面不是字母的竖线

    12.文件的编码:
            :set fenc  "查看当前文件编码
            :set fenc=utf8  "将当前文件编码设置为utf8,使用:w!则vim会以utf8方式编码来保存
            :FencView 打开FencView字符编码列表

    13.文本对象
            w   一个单词
            W   空格分隔的字符串
            s   句子
            p   段落
            “”  引号包裹的文本
            <>  尖括号包裹的文本
            []  方括号包裹的文本
            ()  ()包裹的文本
            {}  {}包裹的文本
        注：文本对象的使用方法 操作+对象范围+文本对象界定符

    14.生成序列
        (1):r!seq 开始 步长 结束
        (2):r!echo {开始..结束..步长}"."
        生成序列后可以通过textwidth和gqq来调整换行

    最好玩的部分：
    正则表达式(与Perl正则表达式不一样的部分)
        vim中正则表达式与Perl模式正则的区别(下面的正则适用于普通匹配模式)：
            --------------------------------------------------
            | 功能             | Vim 方言  | Perl 方言 ~     |
            --------------------------------------------------
            | 强制不区分大小写 | \c        | (?i)            |
            | 强制区分大小写   | \C        | (?-i)           |
            | 不须被引用的群组 | \%(atom\) | (?:atom)        |
            | 保守的倍数描述   | \{-n,m}   | *?，+?，??，{}? |
            | 零宽度匹配       | atom\@=   | (?=atom)        |
            | 零宽度否匹配     | atom\@!   | (?!atom)        |
            | 零宽度反向匹配   | atom\@<=  | (?<=atom)       |
            | 零宽度反向否匹配 | atom\@<!  | (?<!atom)       |
            | 无重试匹配       | atom\@>   | (?>atom)        |
            | 单词开头和结尾   | <和>      | (?>atom)        |
            --------------------------------------------------
            vim正则表达式不支持条件表达式!
        断言匹配
              (abc)@=     后面是abc
              (abc)@<=    前面是abc
              (abc)@!     后面不是abc
              (abc)@<!    前面不是abc
              (abc)@12<!  前面不是abc，但只向前面看12个字节
            例：
                /\vgn%(bar)@=  匹配后面是bar的foo
                /\v%(gn)@<=bar 匹配前面是foo的bar
                /\v%(bar)@!gn  匹配后面不是bar的foo
                /\v%(gn)@<!bar 匹配前面不是foo的bar
                /\v<@1<=span    在@后加上数字代表只匹配指定字节数，这里代表
                                在匹配span后只对前面一个字节试图匹配"<"
            ***记忆规则***
                @始终只对它前面的分组起作用，按正常的顺序书写正则，再替换掉断言匹配的符号即可
        分组匹配
            ()      分组并捕获
            %()     分组但不捕获
            \1      第一个捕获
            []      可选的匹配序列
            %[]     同上，但尽可能多地匹配
        匹配原
            ^和$    行首和行尾
            <和>    单词开头和结束
            \zs     相当于@<=，只不过书写的顺序不一样
                    如/\v^\s*\zsif和/\v(^\s*)@<=if一样
            \ze     相当于@=，用法和\zs一样
            %^和%$  文件头和文件尾
            %V      成对使用，两个%V之间的匹配将只在可视模式下选定
                    区域内进行，如/\v%Vgn%V为在选定,$ s/.*/& &/g区域内匹配foo
            %#      匹配光标位置
            %'m     匹配标记m的位置
            %<'m和%>'m    匹配标记m之前/之后的位置
            %23l          匹配指定行
            %<23l和%>23l  匹配指定行前/行后(其实就是在指定行范围内作匹配)
            %23c          匹配指定列
            %<23c和%>23c  匹配指定列前/列后(在指定列范围内作匹配)

    小技巧：
        :%s/word/gn      统计某个词在文中的出现次数
        :g/^/+1 d        删掉偶数行
        :g/^/+2 d        删掉奇数行(第一行除外)
        :g/pattern/d     删除匹配到的所有行
        :g/pattern/t$    复制所有匹配到的行到文件末尾
        ,$ s/.*/& &/g    将一列变为两列
        :12,13 co 15     将12到13行的内容复制到15行后
        :'a,'b m 'c      将标记a-b之间的行移动到标记c所在行之后
        :12,13d          删除12-13行
        :12,13y m        复制12-13行到m寄存器
        <C-O>            insert模式下按下后，执行一条命令后会自动返回insert模式
        <C-O><C-O>       快速打开上次编辑的文件
        <C-P>            显示补全列表，任何时候都能用
        [I               查看当前行在文件中的所有引用(快速grep)
        :set report=0    此变量记录了vim替换的次数
        :set joinspaces  合并行时保留的空格
        :set spell       打开拼写检查，在写英文单词的时候很有用



1.在vim脚本中vim的命令行语句全部可用,vimscript的语法与python类似,使用`"`(单引号)作为注释符号
2.变量
            b:	  局部于当前缓冲区。
            w:	  局部于当前窗口。
            t:	  局部于当前标签页。    
            g:	  全局。    
            l:	  局部于函数。            
            s:	  局部于 |:source| 的 Vim 脚本。  
                    注:脚本变量在脚本执行完毕后不会被自动
                       删除,下一次执行该脚本时仍然存在
            a:	  函数参数 (只限于函数内使用)。
            v:	  Vim 预定义的全局变量。    
    赋值:   let type:var = value
    删除:   unlet type:var
            unlet! type:var "当该变量不存在时不报错


3.if分支
    if a
        echom "x"
    elseif b
        echom "y"
    else
        echom "z"
    endif
    注：在使用判断条件时，`==`与vim全局变量ignorecase有关，如果ignorecase为0，
        则使用`==`判断字符串时对大小写不敏感，反之对大小写敏感
        而`==?`则始终对大小写不敏感，`==#`始终对大小写敏感,建议对数字的比较也
        使用`==?`。`>`、`<`同理.
4.while循环
    let s:i = 1
    while s:i < 5 
        {语句}
        let s:i += 1
    endwhile
5.for循环
    for i in range(1, 4)
      echo "count is" i
    endfor
6.exist()函数检测变量是否存在,注意传入的参数是变量名字符串而不是变量本身
    if exists("s:s_var")
        echo "variable s_var has exists!values" s:s_var"."
    else if exists("s:t_var")
        echo "variable t_var has exists!values" t_var"."
    else
        echo "both of s_var and t_var does not exist!""."
    endif
7.echo命令和shell中的echo用法差不多,只是不能够像在shell中一样传递参数,
  单引号字符串原样输出,双引号字符串中特殊字符会被转义
  echom 命令的作用与echo命令一样，但是echom输出的内容会被保存到vim的messages
  中，可以通过:messages查看,且echom不能对列表使用
8.关于boolean类型,非空非零即为真,但不以数字开头的字符串转换为数字时为0,
  如:if "ture"会被解析为假
9.函数
    1).编码规范:没有作用域限制的函数必须以大写字母开头
    2).定义函数:
            function GetMeow()
                return "MEow String!"
            endfunction
    3).调用函数:
            :echom b:GetMeow(arg1,arg2,arg3,...)
    4).接受参数
            a:0     传入的参数个数
            a:n     第n个传入的参数(n>=1&&n∈Z)
            a:000   传入的多余参数的列表
            a:arg   传入的名为arg的参数
    5).****不能对函数的参数变量重新赋值
10.数字
    vim有两种数字形式：Number和Float
    Number:
        255 0xff 0Xff 017(八进制)
    Float:
        100.1  5.45e+3(指数)  12.1e-2(负指数)
    注：小数点和小数位必须要有，如5e3错误而5.0e3正确
        当进行Float和Number类型混合运算时，vim强制转换为Float
    除法：
        3 / 2 = 1
        3 / 2.0 = 1.5
11.字符串
    '+'是数字运算符,如果对字符串使用则会现将字符串强制转换为数字
    之后再运算.
    '.'是vim的字符串连接符,和php一样.
    双引号中可以使用转义符号来表示特殊字符,如\\,\",\n等
    字符串字面量即单引号字符串将被原样输出,不做任何转义
    非数字开头的字符串在强制转换时将被转换为0
    使用:help expr_quote查看特殊转义字符
12.vim常用内置函数
    strlen("string")
    len("string")               统计字符串长度
    split("string","sepr")      分割字符串
    join(["a","b","c"],";")     连接字符串列表
    tolower("string")           转换为小写
    toupper("STRING")           转换为大写
13.execute命令
    与python的eval函数一样,将字符串当做命令来执行
    execute 'rightbelow vsplit' . bufname('#')
14.normal命令
    normal命令简单地接受一串键值并当作是在normal模式下输入的。
        :normal ggdd    移动到第一行并将其删除
    注:normal命令会顾及当前的所有映射,例如将G映射到dd,则normal G
       为删除当前行,要忽略用户定义的映射,可以使用normal! command.
15.正则表达式
    vim的搜索"/"和"?"都支持正则表达式,vim对正则表达式有四种解析
    模式,普通模式下需要为特殊元字符如'+'添加反斜杠以表示不同的含义.
        :execute "normal! gg/print.\\+\<CR>"
    使用单引号来包围正则表达式:
        :execute "normal! gg" . '/print.\+' . "\<CR>"
    通常情况下使用`/\vregex`来搜索即可,`\v`即very magic,此模式下
    正则表达式书写方式与其他语言大部分都相同.
16.Ex模式特殊字符(可以通过:h cmdline-special获取帮助):
    %   当前文件名
    #   轮换文件名
    #n  第n个缓冲区的文件名
    ##  参数列表里的所有文件名
    #<n 第n个旧文件名(可通过:oldfiles查看)
    <cword>    被当前光标下的单词代替 (类似于 |star|)
	<cWORD>    被当前光标下的字串代替 (见 |WORD|)
	<cfile>    被当前光标下的路径名代替 (类似于 |gf| 用的方法)
	<afile>    在执行自动命令时，被用来读或写的文件的文件名取代。
	<abuf>     在执行自动命令时，被当前有效的缓冲区序号取代 (对于
	<sfile>    执行 ":source" 命令时，替换为正在被 "source" 执行的文件名。
	<slnum>	   执行 ":source" 命令时，替换为行号。
    注：这些特殊字符可以通过expand函数进行对应的替换，之后使用shellescape
        函数进行转义
